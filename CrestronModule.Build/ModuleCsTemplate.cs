// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CrestronModule.Build
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\nicho\source\repos\Crestron3SeriesVS2022\CrestronModule.Build\ModuleCsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ModuleCsTemplate : ModuleCsTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
using System;
using System.Linq;

using Crestron.Logos.SplusObjects;
using CrestronModule.Core;

using AnalogInput = CrestronModule.Impl.AnalogInput;
using AnalogOutput = CrestronModule.Impl.AnalogOutput;
using DigitalInput = CrestronModule.Impl.DigitalInput;
using DigitalOutput = CrestronModule.Impl.DigitalOutput;
using StringInput = CrestronModule.Impl.StringInput;
using StringOutput = CrestronModule.Impl.StringOutput;
using StringParameter = CrestronModule.Impl.StringParameter;

namespace ");
            
            #line 21 "C:\Users\nicho\source\repos\Crestron3SeriesVS2022\CrestronModule.Build\ModuleCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class _");
            
            #line 23 "C:\Users\nicho\source\repos\Crestron3SeriesVS2022\CrestronModule.Build\ModuleCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            
            #line default
            #line hidden
            this.Write("_CrestronModuleImpl : SplusObject, IModuleFactory, ICrestronLogger\r\n    {\r\n      " +
                    "  ICrestronModule moduleImpl;\r\n        uint stringParameterOffset = 10;\r\n\r\n     " +
                    "   public _");
            
            #line 28 "C:\Users\nicho\source\repos\Crestron3SeriesVS2022\CrestronModule.Build\ModuleCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            
            #line default
            #line hidden
            this.Write(@"_CrestronModuleImpl(
            string InstanceName,
            string ReferenceID,
            CrestronStringEncoding nEncodingType)
            : base(InstanceName, ReferenceID, nEncodingType)
        {
        }

        public override void LogosSplusInitialize()
        {
            try
            {
                this.moduleImpl = new ");
            
            #line 40 "C:\Users\nicho\source\repos\Crestron3SeriesVS2022\CrestronModule.Build\ModuleCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 40 "C:\Users\nicho\source\repos\Crestron3SeriesVS2022\CrestronModule.Build\ModuleCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            
            #line default
            #line hidden
            this.Write("(this, this);\r\n            }\r\n            catch (Exception ex) { this.ObjectCatch" +
                    "Handler(ex); }\r\n            finally { this.ObjectFinallyHandler(); }\r\n        }\r" +
                    "\n\r\n        public override object FunctionMain(object __obj__)\r\n        {\r\n     " +
                    "       try\r\n            {\r\n                var ctx = base.SplusFunctionMainStart" +
                    "Code();\r\n                this.Trace(\"CrestronModule FunctionMain\");\r\n\r\n         " +
                    "       var initializableModule = this.moduleImpl as IMainMethod;\r\n              " +
                    "  if (initializableModule != null) initializableModule.Main();\r\n            }\r\n " +
                    "           catch (Exception ex) { this.ObjectCatchHandler(ex); }\r\n            fi" +
                    "nally { this.ObjectFinallyHandler(); }\r\n            return __obj__;\r\n        }\r\n" +
                    "\r\n        protected override void ObjectCatchHandler(Exception e)\r\n        {\r\n  " +
                    "          this.Trace(\"ObjectCatchHandler: {0}\", e.Message);\r\n            base.Ob" +
                    "jectCatchHandler(e);\r\n        }\r\n\r\n        protected override void ObjectFinally" +
                    "Handler()\r\n        {\r\n            this.Trace(\"ObjectFinallyHandler\");\r\n         " +
                    "   base.ObjectFinallyHandler();\r\n        }\r\n\r\n        public IInput<bool> Digita" +
                    "lInput(string name, Action<bool> onChange)\r\n        {\r\n            var join = (u" +
                    "int)m_DigitalInputList.Count;\r\n            var input = new Crestron.Logos.SplusO" +
                    "bjects.DigitalInput(join, this);\r\n            this.Trace(\"CreateDigitalInput {0}" +
                    "\", join);\r\n            m_DigitalInputList.Add(join, input);\r\n            if (onC" +
                    "hange != null) BindDigitalInput(input, onChange);\r\n            return new Digita" +
                    "lInput(input);\r\n        }\r\n        public IOutput<bool> DigitalOutput(string nam" +
                    "e)\r\n        {\r\n            var join = (uint)m_DigitalOutputList.Count;\r\n        " +
                    "    var output = new Crestron.Logos.SplusObjects.DigitalOutput(join, this);\r\n   " +
                    "         this.Trace(\"CreateDigitalOutput {0}\", join);\r\n            m_DigitalOutp" +
                    "utList.Add(join, output);\r\n            return new DigitalOutput(output);\r\n      " +
                    "  }\r\n        private void BindDigitalInput(Crestron.Logos.SplusObjects.DigitalIn" +
                    "put input, Action<bool> onChange)\r\n        {\r\n            input.OnDigitalChange." +
                    "Add(new InputChangeHandlerWrapper(o =>\r\n            {\r\n                this.Trac" +
                    "e(\"OnDigitalChange\");\r\n                var e = o as SignalEventArgs;\r\n          " +
                    "      try\r\n                {\r\n                    var ctx = this.SplusThreadStar" +
                    "tCode(e);\r\n                    if (onChange != null) onChange(input.Value == 0 ?" +
                    " false : true);\r\n                }\r\n                catch (Exception ex) { this." +
                    "ObjectCatchHandler(ex); }\r\n                finally { this.ObjectFinallyHandler(e" +
                    "); }\r\n                return this;\r\n            }));\r\n        }\r\n        public " +
                    "IInput<string> StringInput(string name, int maxCapacity, Action<string> onChange" +
                    ")\r\n        {\r\n            var join = (uint)(m_AnalogInputList.Count + m_StringIn" +
                    "putList.Count);\r\n            var input = new Crestron.Logos.SplusObjects.StringI" +
                    "nput(join, maxCapacity, this);\r\n            this.Trace(\"CreateStringInput {0}\", " +
                    "join);\r\n            m_StringInputList.Add(join, input);\r\n            if (onChang" +
                    "e != null) BindStringInput(input, onChange);\r\n            return new StringInput" +
                    "(input);\r\n        }\r\n        public IOutput<string> StringOutput(string name)\r\n " +
                    "       {\r\n            var join = (uint)(m_AnalogOutputList.Count + m_StringOutpu" +
                    "tList.Count);\r\n            var output = new Crestron.Logos.SplusObjects.StringOu" +
                    "tput(join, this);\r\n            this.Trace(\"CreateStringOutput {0}\", join);\r\n    " +
                    "        m_StringOutputList.Add(join, output);\r\n            return new StringOutp" +
                    "ut(output);\r\n        }\r\n        private void BindStringInput(Crestron.Logos.Splu" +
                    "sObjects.StringInput input, Action<string> onChange)\r\n        {\r\n            thi" +
                    "s.Trace(\"BindStringInput\");\r\n            input.OnSerialChange.Add(new InputChang" +
                    "eHandlerWrapper(o =>\r\n            {\r\n                this.Trace(\"OnSerialChange\"" +
                    ");\r\n                var e = o as SignalEventArgs;\r\n                try\r\n        " +
                    "        {\r\n                    var ctx = this.SplusThreadStartCode(e);\r\n        " +
                    "            if (onChange != null) onChange(input.Value.ToString());\r\n           " +
                    "     }\r\n                catch (Exception ex) { this.ObjectCatchHandler(ex); }\r\n " +
                    "               finally { this.ObjectFinallyHandler(e); }\r\n                return" +
                    " this;\r\n            }));\r\n        }\r\n        public IInput<ushort> AnalogInput(s" +
                    "tring name, Action<ushort> onChange)\r\n        {\r\n            var join = (uint)(m" +
                    "_AnalogInputList.Count + m_StringInputList.Count);\r\n            var input = new " +
                    "Crestron.Logos.SplusObjects.AnalogInput(join, this);\r\n            this.Trace(\"Cr" +
                    "eateAnalogInput {0}\", join);\r\n            m_AnalogInputList.Add(join, input);\r\n " +
                    "           if (onChange != null) BindAnalogInput(input, onChange);\r\n            " +
                    "return new AnalogInput(input);\r\n        }\r\n        public IOutput<ushort> Analog" +
                    "Output(string name)\r\n        {\r\n            var join = (uint)(m_AnalogOutputList" +
                    ".Count + m_StringOutputList.Count);\r\n            var output = new Crestron.Logos" +
                    ".SplusObjects.AnalogOutput(join, this);\r\n            this.Trace(\"CreateAnalogOut" +
                    "put {0}\", join);\r\n            m_AnalogOutputList.Add(join, output);\r\n           " +
                    " return new AnalogOutput(output);\r\n        }\r\n        private void BindAnalogInp" +
                    "ut(Crestron.Logos.SplusObjects.AnalogInput input, Action<ushort> onChange)\r\n    " +
                    "    {\r\n            this.Trace(\"BindAnalogInput\");\r\n            input.OnAnalogCha" +
                    "nge.Add(new InputChangeHandlerWrapper(o =>\r\n            {\r\n                this." +
                    "Trace(\"OnAnalogChange\");\r\n                var e = o as SignalEventArgs;\r\n       " +
                    "         try\r\n                {\r\n                    var ctx = this.SplusThreadS" +
                    "tartCode(e);\r\n                    if (onChange != null) onChange(input.Value);\r\n" +
                    "                }\r\n                catch (Exception ex) { this.ObjectCatchHandle" +
                    "r(ex); }\r\n                finally { this.ObjectFinallyHandler(e); }\r\n           " +
                    "     return this;\r\n            }));\r\n        }\r\n\r\n        public IParameter<stri" +
                    "ng> StringParameter(string name, int maxCapacity)\r\n        {\r\n            var pa" +
                    "rameter = new Crestron.Logos.SplusObjects.StringParameter(this.stringParameterOf" +
                    "fset, this);\r\n            m_ParameterList.Add(this.stringParameterOffset, parame" +
                    "ter);\r\n            this.stringParameterOffset++;\r\n            return new StringP" +
                    "arameter(parameter);\r\n        }\r\n        void IModuleFactory.DigitalInputSkip()\r" +
                    "\n        {\r\n            // Do nothing\r\n        }\r\n        void IModuleFactory.Di" +
                    "gitalOutputSkip()\r\n        {\r\n            // Do nothing\r\n        }\r\n        void" +
                    " IModuleFactory.StringInputSkip()\r\n        {\r\n            // Do nothing\r\n       " +
                    " }\r\n        void IModuleFactory.StringOutputSkip()\r\n        {\r\n            // Do" +
                    " nothing\r\n        }\r\n        void IModuleFactory.AnalogInputSkip()\r\n        {\r\n " +
                    "           // Do nothing\r\n        }\r\n        void IModuleFactory.AnalogOutputSki" +
                    "p()\r\n        {\r\n            // Do nothing\r\n        }\r\n        void IModuleFactor" +
                    "y.StringParameterSkip()\r\n        {\r\n            // Do nothing\r\n        }\r\n    }\r" +
                    "\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 212 "C:\Users\nicho\source\repos\Crestron3SeriesVS2022\CrestronModule.Build\ModuleCsTemplate.tt"

public string Namespace { get; set; }
public string TypeName { get; set; }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ModuleCsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
